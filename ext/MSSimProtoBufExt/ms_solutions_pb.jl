# Autogenerated using ProtoBuf.jl v1.1.1 on 2025-09-09T09:03:58.344
# original file: /home/yuyichao/projects/yyc-data/lib/MSSim/gen/ms_solutions.proto (proto3 syntax)

module ms_solutions_pb

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export SolutionProperties


struct SolutionProperties
    total_time::Float64
    modes::Vector{Float64}
    rdis::Vector{Float64}
    idis::Vector{Float64}
    rdis_det::Vector{Float64}
    idis_det::Vector{Float64}
    rcumdis::Vector{Float64}
    icumdis::Vector{Float64}
    area::Vector{Float64}
    area_det::Vector{Float64}
end
PB.default_values(::Type{SolutionProperties}) = (;total_time = zero(Float64), modes = Vector{Float64}(), rdis = Vector{Float64}(), idis = Vector{Float64}(), rdis_det = Vector{Float64}(), idis_det = Vector{Float64}(), rcumdis = Vector{Float64}(), icumdis = Vector{Float64}(), area = Vector{Float64}(), area_det = Vector{Float64}())
PB.field_numbers(::Type{SolutionProperties}) = (;total_time = 1, modes = 2, rdis = 3, idis = 4, rdis_det = 5, idis_det = 6, rcumdis = 7, icumdis = 8, area = 9, area_det = 10)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:SolutionProperties})
    total_time = zero(Float64)
    modes = PB.BufferedVector{Float64}()
    rdis = PB.BufferedVector{Float64}()
    idis = PB.BufferedVector{Float64}()
    rdis_det = PB.BufferedVector{Float64}()
    idis_det = PB.BufferedVector{Float64}()
    rcumdis = PB.BufferedVector{Float64}()
    icumdis = PB.BufferedVector{Float64}()
    area = PB.BufferedVector{Float64}()
    area_det = PB.BufferedVector{Float64}()
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            total_time = PB.decode(d, Float64)
        elseif field_number == 2
            PB.decode!(d, wire_type, modes)
        elseif field_number == 3
            PB.decode!(d, wire_type, rdis)
        elseif field_number == 4
            PB.decode!(d, wire_type, idis)
        elseif field_number == 5
            PB.decode!(d, wire_type, rdis_det)
        elseif field_number == 6
            PB.decode!(d, wire_type, idis_det)
        elseif field_number == 7
            PB.decode!(d, wire_type, rcumdis)
        elseif field_number == 8
            PB.decode!(d, wire_type, icumdis)
        elseif field_number == 9
            PB.decode!(d, wire_type, area)
        elseif field_number == 10
            PB.decode!(d, wire_type, area_det)
        else
            PB.skip(d, wire_type)
        end
    end
    return SolutionProperties(total_time, modes[], rdis[], idis[], rdis_det[], idis_det[], rcumdis[], icumdis[], area[], area_det[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::SolutionProperties)
    initpos = position(e.io)
    x.total_time !== zero(Float64) && PB.encode(e, 1, x.total_time)
    !isempty(x.modes) && PB.encode(e, 2, x.modes)
    !isempty(x.rdis) && PB.encode(e, 3, x.rdis)
    !isempty(x.idis) && PB.encode(e, 4, x.idis)
    !isempty(x.rdis_det) && PB.encode(e, 5, x.rdis_det)
    !isempty(x.idis_det) && PB.encode(e, 6, x.idis_det)
    !isempty(x.rcumdis) && PB.encode(e, 7, x.rcumdis)
    !isempty(x.icumdis) && PB.encode(e, 8, x.icumdis)
    !isempty(x.area) && PB.encode(e, 9, x.area)
    !isempty(x.area_det) && PB.encode(e, 10, x.area_det)
    return position(e.io) - initpos
end
function PB._encoded_size(x::SolutionProperties)
    encoded_size = 0
    x.total_time !== zero(Float64) && (encoded_size += PB._encoded_size(x.total_time, 1))
    !isempty(x.modes) && (encoded_size += PB._encoded_size(x.modes, 2))
    !isempty(x.rdis) && (encoded_size += PB._encoded_size(x.rdis, 3))
    !isempty(x.idis) && (encoded_size += PB._encoded_size(x.idis, 4))
    !isempty(x.rdis_det) && (encoded_size += PB._encoded_size(x.rdis_det, 5))
    !isempty(x.idis_det) && (encoded_size += PB._encoded_size(x.idis_det, 6))
    !isempty(x.rcumdis) && (encoded_size += PB._encoded_size(x.rcumdis, 7))
    !isempty(x.icumdis) && (encoded_size += PB._encoded_size(x.icumdis, 8))
    !isempty(x.area) && (encoded_size += PB._encoded_size(x.area, 9))
    !isempty(x.area_det) && (encoded_size += PB._encoded_size(x.area_det, 10))
    return encoded_size
end
end # module
